/**
 * Í≤åÏûÑ ÏÉÅÌÉú Í∏∞Î∞ò Î∞∞Í≤Ω Ìö®Í≥º ÏÑ§Ï†ï
 * Í≤åÏûÑ ÏÉÅÌÉú(Ï≤¥Î†•, Ï†ïÏã†Î†• Îì±)Ïóê Îî∞Îùº ÏûêÎèôÏúºÎ°ú ÌôúÏÑ±ÌôîÎêòÎäî Ìö®Í≥ºÎì§Ïùò ÏÑ§Ï†ïÍ∞íÎì§ÏùÑ Í¥ÄÎ¶¨Ìï©ÎãàÎã§.
 */

// ==========================================
// ü©∫ Ï≤¥Î†• Í∏∞Î∞ò Ìö®Í≥º ÏÑ§Ï†ï
// ==========================================

/**
 * Ï≤¥Î†• Í≤ΩÍ≥† ÏûÑÍ≥ÑÍ∞í ÏÑ§Ï†ï
 */
export const HEALTH_THRESHOLDS = {
  /** Ï≤¥Î†• Í≤ΩÍ≥† ÏãúÏûë ÏûÑÍ≥ÑÍ∞í (34% ÎØ∏Îßå) */
  WARNING_THRESHOLD: 0.34,
  /** ÏúÑÌóò ÏÉÅÌÉú ÏûÑÍ≥ÑÍ∞í (20% ÎØ∏Îßå) */
  CRITICAL_THRESHOLD: 0.2,
  /** Í∑πÏúÑÌóò ÏÉÅÌÉú ÏûÑÍ≥ÑÍ∞í (10% ÎØ∏Îßå) */
  EXTREME_THRESHOLD: 0.1,
} as const;

/**
 * HealthWarning Ìö®Í≥º Í∏∞Î≥∏ Îß§Í∞úÎ≥ÄÏàò
 */
export const HEALTH_WARNING_CONFIG = {
  defaults: {
    /** Í∏∞Î≥∏ ÏÉâÏÉÅ (Îπ®Í∞ÑÏÉâ) */
    color: '#FF0000',
    /** Ï†êÎ©∏ Ï£ºÍ∏∞ (Î∞ÄÎ¶¨Ï¥à) */
    pulseInterval: 800,
    /** ÌéòÏù¥Îìú Ïù∏ ÏßÄÏÜçÏãúÍ∞Ñ (Î∞ÄÎ¶¨Ï¥à) */
    fadeInDuration: 300,
    /** ÌéòÏù¥Îìú ÏïÑÏõÉ ÏßÄÏÜçÏãúÍ∞Ñ (Î∞ÄÎ¶¨Ï¥à) */
    fadeOutDuration: 500,
    /** ÏµúÎåÄ Î∂àÌà¨Î™ÖÎèÑ */
    maxOpacity: 0.3,
    /** ÏµúÏÜå Î∂àÌà¨Î™ÖÎèÑ */
    minOpacity: 0.05,
    /** ÌÖåÎëêÎ¶¨ ÎëêÍªò (ÌîΩÏÖÄ) */
    borderWidth: 8,
  },
  /** Ï≤¥Î†• ÏÉÅÌÉúÎ≥Ñ ÏÑ§Ï†ï */
  byHealthLevel: {
    /** Í≤ΩÍ≥† ÏÉÅÌÉú (34% ÎØ∏Îßå) */
    warning: {
      color: '#FF6B47', // Ï£ºÌô©Îπõ Îπ®Í∞ï
      pulseInterval: 1200,
      maxOpacity: 0.25,
      minOpacity: 0.05,
      borderWidth: 6,
    },
    /** ÏúÑÌóò ÏÉÅÌÉú (20% ÎØ∏Îßå) */
    critical: {
      color: '#FF3333', // Î∞ùÏùÄ Îπ®Í∞ï
      pulseInterval: 900,
      maxOpacity: 0.35,
      minOpacity: 0.08,
      borderWidth: 8,
    },
    /** Í∑πÏúÑÌóò ÏÉÅÌÉú (10% ÎØ∏Îßå) */
    extreme: {
      color: '#FF0000', // ÏàúÎπ®Í∞ï
      pulseInterval: 600,
      maxOpacity: 0.45,
      minOpacity: 0.12,
      borderWidth: 10,
    },
  },
} as const;

// ==========================================
// üß† Ï†ïÏã†Î†• Í∏∞Î∞ò Ìö®Í≥º ÏÑ§Ï†ï (ÎØ∏Îûò ÌôïÏû•Ïö©)
// ==========================================

/**
 * Ï†ïÏã†Î†• Í≤ΩÍ≥† ÏûÑÍ≥ÑÍ∞í ÏÑ§Ï†ï (ÎØ∏Îûò ÌôïÏû•Ïö©)
 */
export const MIND_THRESHOLDS = {
  WARNING_THRESHOLD: 0.3,
  CRITICAL_THRESHOLD: 0.15,
} as const;

// ==========================================
// üéØ ÏÉÅÌÉú Í∏∞Î∞ò Ìö®Í≥º Îß§Ìïë
// ==========================================

/**
 * Í≤åÏûÑ ÏÉÅÌÉú Í∏∞Î∞ò Ìö®Í≥º ÌÉÄÏûÖ Ï†ïÏùò
 */
export type GameStateEffectType = 'health_warning' | 'mind_distortion' | 'none';

/**
 * ÏÉÅÌÉú Í∏∞Î∞ò Ìö®Í≥º Ïö∞ÏÑ†ÏàúÏúÑ (Ïà´ÏûêÍ∞Ä ÎÜíÏùÑÏàòÎ°ù Ïö∞ÏÑ†ÏàúÏúÑÍ∞Ä ÎÜíÏùå)
 */
export const GAMESTATE_EFFECT_PRIORITY = {
  health_warning: 100, // Í∞ÄÏû• ÎÜíÏùÄ Ïö∞ÏÑ†ÏàúÏúÑ
  mind_distortion: 80, // ÎØ∏Îûò ÌôïÏû•Ïö©
  none: 0,
} as const;

/**
 * Ï≤¥Î†• ÏàòÏπòÎ•º Í∏∞Î∞òÏúºÎ°ú Ï†ÅÏ†àÌïú HealthWarning ÏÑ§Ï†ïÏùÑ Î∞òÌôòÌï©ÎãàÎã§.
 * @param healthPercentage - Ï≤¥Î†• ÎπÑÏú® (0~1)
 * @returns HealthWarning ÏÑ§Ï†ï ÎòêÎäî null (Ìö®Í≥º Î∂àÌïÑÏöî)
 */
export function getHealthWarningConfig(healthPercentage: number) {
  if (healthPercentage >= HEALTH_THRESHOLDS.WARNING_THRESHOLD) {
    return null; // Ï≤¥Î†•Ïù¥ Ï∂©Î∂ÑÌï®
  }

  if (healthPercentage < HEALTH_THRESHOLDS.EXTREME_THRESHOLD) {
    return HEALTH_WARNING_CONFIG.byHealthLevel.extreme;
  }

  if (healthPercentage < HEALTH_THRESHOLDS.CRITICAL_THRESHOLD) {
    return HEALTH_WARNING_CONFIG.byHealthLevel.critical;
  }

  return HEALTH_WARNING_CONFIG.byHealthLevel.warning;
}

/**
 * Í≤åÏûÑ ÏÉÅÌÉúÎ•º Í∏∞Î∞òÏúºÎ°ú ÌôúÏÑ±ÌôîÎêòÏñ¥Ïïº Ìï† Ìö®Í≥ºÎ•º Í≤∞Ï†ïÌï©ÎãàÎã§.
 * @param health - ÌòÑÏû¨ Ï≤¥Î†•
 * @param maxHealth - ÏµúÎåÄ Ï≤¥Î†•
 * @param mind - ÌòÑÏû¨ Ï†ïÏã†Î†• (ÎØ∏Îûò ÌôïÏû•Ïö©)
 * @param maxMind - ÏµúÎåÄ Ï†ïÏã†Î†• (ÎØ∏Îûò ÌôïÏû•Ïö©)
 * @returns ÌôúÏÑ±ÌôîÌï† Ìö®Í≥º ÌÉÄÏûÖ
 */
export function determineGameStateEffect(
  health: number,
  maxHealth: number,
  _mind?: number,
  _maxMind?: number
): GameStateEffectType {
  const healthPercentage = health / maxHealth;

  // Ï≤¥Î†• Í≤ΩÍ≥† Ìö®Í≥º Ïö∞ÏÑ† ÌôïÏù∏
  if (healthPercentage < HEALTH_THRESHOLDS.WARNING_THRESHOLD) {
    return 'health_warning';
  }

  // ÎØ∏Îûò ÌôïÏû•: Ï†ïÏã†Î†• Í∏∞Î∞ò Ìö®Í≥º
  // if (mind !== undefined && maxMind !== undefined) {
  //   const mindPercentage = mind / maxMind;
  //   if (mindPercentage < MIND_THRESHOLDS.WARNING_THRESHOLD) {
  //     return 'mind_distortion';
  //   }
  // }

  return 'none';
}
